--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix" DSP_BLOCK_BALANCING="Auto" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=32 LPM_WIDTHB=32 LPM_WIDTHP=64 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=70
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_mult 2008:09:30:18:36:56:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_padd 2008:09:04:11:11:31:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION stratix_mac_mult (aclr[3..0], clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], ena[3..0], signa, signb)
WITH ( dataa_clear, dataa_clock, dataa_width, datab_clear, datab_clock, datab_width, output_clear, output_clock, signa_clear, signa_clock, signa_internally_grounded, signb_clear, signb_clock, signb_internally_grounded)
RETURNS ( dataout[dataa_width+datab_width-1..0], scanouta[dataa_width-1..0], scanoutb[datab_width-1..0]);
FUNCTION stratix_mac_out (aclr[3..0], addnsub0, addnsub1, clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], datac[datac_width-1..0], datad[datad_width-1..0], ena[3..0], signa, signb, zeroacc)
WITH ( addnsub0_clear, addnsub0_clock, addnsub0_pipeline_clear, addnsub0_pipeline_clock, addnsub1_clear, addnsub1_clock, addnsub1_pipeline_clear, addnsub1_pipeline_clock, dataa_width = 1, datab_width = 1, datac_width = 1, datad_width = 1, dataout_width = 72, operation_mode, output_clear, output_clock, signa_clear, signa_clock, signa_pipeline_clear, signa_pipeline_clock, signb_clear, signb_clock, signb_pipeline_clear, signb_pipeline_clock, zeroacc_clear, zeroacc_clock, zeroacc_pipeline_clear, zeroacc_pipeline_clock)
RETURNS ( accoverflow, dataout[dataout_width-1..0]);

--synthesis_resources = dsp_9bit 8 
SUBDESIGN mult_i4n
( 
	dataa[31..0]	:	input;
	datab[31..0]	:	input;
	result[63..0]	:	output;
) 
VARIABLE 
	mac_mult1 : stratix_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true",
			signb_internally_grounded = "true"
		);
	mac_mult2 : stratix_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_mult3 : stratix_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signb_internally_grounded = "true"
		);
	mac_mult4 : stratix_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true"
		);
	mac_out5 : stratix_mac_out
		WITH (
			dataa_width = 36,
			datab_width = 36,
			datac_width = 36,
			datad_width = 36,
			dataout_width = 72,
			operation_mode = "36_bit_multiply"
		);
	aclr	: NODE;
	clken	: NODE;
	clock	: NODE;

BEGIN 
	mac_mult1.aclr[] = aclr;
	mac_mult1.clk[] = clock;
	mac_mult1.dataa[] = ( dataa[13..0], B"0000");
	mac_mult1.datab[] = ( datab[13..0], B"0000");
	mac_mult1.ena[] = clken;
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult2.aclr[] = aclr;
	mac_mult2.clk[] = clock;
	mac_mult2.dataa[17..0] = dataa[31..14];
	mac_mult2.datab[17..0] = datab[31..14];
	mac_mult2.ena[] = clken;
	mac_mult2.signa = B"0";
	mac_mult2.signb = B"0";
	mac_mult3.aclr[] = aclr;
	mac_mult3.clk[] = clock;
	mac_mult3.dataa[17..0] = dataa[31..14];
	mac_mult3.datab[] = ( datab[13..0], B"0000");
	mac_mult3.ena[] = clken;
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"0";
	mac_mult4.aclr[] = aclr;
	mac_mult4.clk[] = clock;
	mac_mult4.dataa[] = ( dataa[13..0], B"0000");
	mac_mult4.datab[17..0] = datab[31..14];
	mac_mult4.ena[] = clken;
	mac_mult4.signa = B"0";
	mac_mult4.signb = B"0";
	mac_out5.aclr[] = aclr;
	mac_out5.clk[] = clock;
	mac_out5.dataa[] = mac_mult1.dataout[];
	mac_out5.datab[] = mac_mult2.dataout[];
	mac_out5.datac[] = mac_mult3.dataout[];
	mac_out5.datad[] = mac_mult4.dataout[];
	mac_out5.ena[] = clken;
	mac_out5.signa = B"0";
	mac_out5.signb = B"0";
	aclr = GND;
	clken = VCC;
	clock = GND;
	result[63..0] = mac_out5.dataout[71..8];
END;
--VALID FILE
